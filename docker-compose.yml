version: '3.8'


networks:
  backend:
    driver: "bridge"

services:

  nginx:
     image: 'jc21/nginx-proxy-manager:latest'
     restart: always
     depends_on:
      - redis
      - db
     networks:
      - backend
     ports:
       - '80:80'
       - '81:81'
       - '443:443'
       - '8070-8080:8070-8080'
       - '1883:1883'
     volumes:
       - nginx:/data
       - ./data/letsencrypt/letsencrypt:/etc/letsencrypt

  api:
    image: 'norbye93/api:latest'
    container_name: 'api'
    restart: always
    networks:
      - backend
    expose:
      - 8090
    volumes:
      - api:/api
    depends_on:
      - db
      - redis
    env_file:
      - .env.api
  api_dep:
    image: 'norbye93/apiapp:latest'
    container_name: api-dep
    restart: always
    networks:
      - backend
    expose:
      - 8080
    volumes:
      - api-dep:/api-dep
    depends_on:
      - db
    environment:
      DATABASE_URL: postgres://admin:3d6768c7@db:5432/iot

  db:
   image: postgres:latest
   volumes:
     - postgres:/mydatabase
   expose:
    - 5432
  #  ports:
  #    - "5432:5432"
   restart: always
   networks:
    - backend
   environment:
     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
     - POSTGRES_USER=${POSTGRES_USER}
     - POSTGRES_DB=${POSTGRES_DB}


  nanomq:
    image: emqx/nanomq:latest
    container_name: nanomq
    ports:
      - "8883:8883"
      - "8083:8083"
      - "8084:8084"
      - "1884:1884"
    # expose:
    #   - 1884
    networks:
      - backend
    volumes:
      - ./data/nanomq:/etc
    restart: unless-stopped


  # mosquitto:
  #  image: eclipse-mosquitto:latest
  #  container_name: mosquitto
  #  restart: always
  #  networks:
  #   - backend
  # #  ports:
  # #    - "1883:1883"
  #  expose:
  #    - 1883

  #  volumes:
  #    - ./data/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  #    - ./data/mosquitto/passwd:/mosquitto/config/passwd

  influxdb:
   image: influxdb:latest
   privileged: true
   container_name: influxdb
   restart: always
   networks:
    - backend
   expose:
     - 8086
   volumes:
     - influxdb:/var/lib/influxdb2
     - influxdb:/etc/influxdb2
   environment:
     - DOCKER_INFLUXDB_INIT_MODE=${INFLUXDB_INIT_MODE}
     - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
     - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
     - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
     - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
     - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}


  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    networks:
      - backend
    volumes:
      - ./data/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - nanomq
      - influxdb

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - backend
    expose:
      - 6379




volumes:
  influxdb:
  telegraf:
  nginx:
  api:
  postgres:
  api-dep: